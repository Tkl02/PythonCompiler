================================================================================
GRAMÁTICA FORMAL DA LINGUAGEM
================================================================================

Esta gramática descreve a sintaxe completa da linguagem de programação.
Notação: [] = opcional, * = zero ou mais, + = um ou mais, | = ou

================================================================================
1. PROGRAMA
================================================================================

programa         ::= declaração* EOF

declaração       ::= instrução_break
                   | instrução_atribuição
                   | instrução_while
                   | instrução_if
                   | instrução_expressão

instrução_expressão ::= expressão ';'

================================================================================
2. DECLARAÇÕES/INSTRUÇÕES
================================================================================

instrução_break  ::= 'break' ';'

instrução_atribuição ::= IDENTIFICADOR '=' expressão ';'

instrução_if     ::= 'if' '(' expressão ')' '{' bloco_composto '}' 
                     ['else' (instrução_if | '{' bloco_composto '}')]

instrução_while  ::= 'while' '(' expressão ')' '{' bloco_composto '}'

bloco_composto   ::= (declaração ';'?)*

================================================================================
3. EXPRESSÕES (EM ORDEM DE PRECEDÊNCIA)
================================================================================

# Nível 1: OR Lógico (menor precedência)
expressão        ::= and_expressão ('or' and_expressão)*

# Nível 2: AND Lógico
and_expressão    ::= comp_expressão ('and' comp_expressão)*

# Nível 3: Comparação
comp_expressão   ::= arit_expressão (operador_comp arit_expressão)*

operador_comp    ::= '==' | '!=' | '<' | '>' | '<=' | '>='

# Nível 4: Adição e Subtração
arit_expressão   ::= termo (operador_adit termo)*

operador_adit    ::= '+' | '-'

# Nível 5: Multiplicação e Divisão
termo            ::= fator (operador_mult fator)*

operador_mult    ::= '*' | '/'

# Nível 6: Operadores Unários e Literais (maior precedência)
fator            ::= operador_unário fator
                   | literal
                   | IDENTIFICADOR
                   | '(' expressão ')'
                   | instrução_print

operador_unário  ::= 'not' | '-' | '+'

literal          ::= INTEGER
                   | FLOAT
                   | STRING
                   | BOOLEAN

instrução_print  ::= 'print' '(' expressão ')'

================================================================================
4. TOKENS (ELEMENTOS LÉXICOS)
================================================================================

# Literais
INTEGER          ::= ['-']? DÍGITO+
FLOAT            ::= ['-']? DÍGITO+ '.' DÍGITO+
STRING           ::= '"' CARACTERE* '"'
BOOLEAN          ::= 'true' | 'false'

# Identificadores
IDENTIFICADOR    ::= (LETRA | '_') (LETRA | DÍGITO | '_')*

# Palavras Reservadas
PALAVRA_RESERVADA ::= 'if' | 'else' | 'while' | 'print' | 'break'
                    | 'true' | 'false' | 'and' | 'or' | 'not'

# Operadores Aritméticos
OP_ARITMETICO    ::= '+' | '-' | '*' | '/'

# Operadores de Comparação
OP_COMPARAÇÃO    ::= '==' | '!=' | '<' | '>' | '<=' | '>='

# Operadores Lógicos
OP_LÓGICO        ::= 'and' | 'or' | 'not'

# Delimitadores
DELIMITADOR      ::= ';' | '(' | ')' | '{' | '}'

# Atribuição
ATRIBUIÇÃO       ::= '='

# Comentários
COMENTÁRIO       ::= '#{' QUALQUER_CARACTERE* '}#'

# Elementos Básicos
DÍGITO           ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
LETRA            ::= 'a'..'z' | 'A'..'Z'
CARACTERE        ::= qualquer caractere exceto '"'
ESPAÇO           ::= ' ' | '\t' | '\n' | '\r'

================================================================================
5. PRECEDÊNCIA DE OPERADORES (MAIOR → MENOR)
================================================================================

Nível 1 (Maior): '(' ')'                    [Parênteses]
Nível 2:         'not', '-' (unário), '+'   [Operadores Unários]
Nível 3:         '*', '/'                   [Multiplicação, Divisão]
Nível 4:         '+', '-'                   [Adição, Subtração]
Nível 5:         '<', '>', '<=', '>='       [Comparação Relacional]
Nível 6:         '==', '!='                 [Comparação de Igualdade]
Nível 7:         'and'                      [AND Lógico]
Nível 8 (Menor): 'or'                       [OR Lógico]

================================================================================
6. ASSOCIATIVIDADE
================================================================================

Operadores Binários:  Associatividade à Esquerda
Operadores Unários:   Associatividade à Direita
Atribuição:           Associatividade à Direita

================================================================================
7. REGRAS SEMÂNTICAS
================================================================================

7.1 TIPOS DE DADOS
------------------
Integer  : Números inteiros (-2147483648 a 2147483647)
Float    : Números de ponto flutuante
String   : Cadeia de caracteres entre aspas duplas
Boolean  : true ou false

7.2 CONVERSÕES DE TIPO
----------------------
Integer + Float   → Float (ou Integer se resultado for inteiro exato)
Float + Float     → Float (ou Integer se resultado for inteiro exato)
Integer + Integer → Integer
String + qualquer → String (concatenação)
Integer * String  → String (repetição)
String * Integer  → String (repetição)

7.3 OPERAÇÕES PERMITIDAS POR TIPO
----------------------------------
Integer:  +, -, *, /, ==, !=, <, >, <=, >=
Float:    +, -, *, /, ==, !=, <, >, <=, >=
String:   + (concat), * (repetição), ==, !=, <, >, <=, >=
Boolean:  ==, !=, and, or, not

7.4 ESCOPO
----------
- Todas as variáveis são globais
- Variáveis devem ser inicializadas antes do uso
- Não há declaração explícita de variáveis

7.5 CONTROLE DE FLUXO
---------------------
- 'break' só pode aparecer dentro de 'while'
- Condições em 'if' e 'while' devem resultar em Boolean
- Blocos sempre delimitados por '{' e '}'

================================================================================
8. EXEMPLOS DE SINTAXE VÁLIDA
================================================================================

8.1 DECLARAÇÃO DE VARIÁVEIS
----------------------------
x = 10;
nome = "João";
ativo = true;
resultado = 3.14;

8.2 EXPRESSÕES ARITMÉTICAS
--------------------------
soma = a + b;
media = (a + b + c) / 3;
area = base * altura / 2;

8.3 EXPRESSÕES LÓGICAS
----------------------
valido = idade >= 18 and tem_permissao;
pode_sair = fim_semana or feriado;
negacao = not ativo;

8.4 ESTRUTURA IF-ELSE
---------------------
if (x > 5) {
    print("Maior");
};

if (idade >= 18) {
    print("Maior de idade");
} else {
    print("Menor de idade");
};

if (nota >= 7) {
    print("Aprovado");
} else if (nota >= 5) {
    print("Recuperação");
} else {
    print("Reprovado");
};

8.5 ESTRUTURA WHILE
-------------------
i = 0;
while (i < 10) {
    print(i);
    i = i + 1;
};

8.6 BREAK
---------
i = 0;
while (i < 100) {
    if (i == 50) {
        break;
    };
    i = i + 1;
};

8.7 COMENTÁRIOS
---------------
#{ Este é um comentário em bloco }#

#{
  Comentário
  de múltiplas
  linhas
}#

x = 10; #{ Comentário inline }#

================================================================================
9. RESTRIÇÕES SINTÁTICAS
================================================================================

1. Toda instrução deve terminar com ';'
2. Blocos de código devem usar '{' e '}'
3. Condições devem estar entre '(' e ')'
4. Strings devem usar aspas duplas '"'
5. Comentários devem usar '#{' e '}#'
6. Identificadores não podem começar com dígito
7. Identificadores não podem ser palavras reservadas
8. Não pode haver espaços em branco dentro de tokens
9. 'break' só é válido dentro de 'while'
10. Expressões devem resultar em um valor

================================================================================
10. NOTAÇÃO BNF ESTENDIDA (EBNF) FORMAL
================================================================================

<programa>         ::= { <declaração> } <EOF>

<declaração>       ::= <instr_break>
                     | <instr_atribuição>
                     | <instr_while>
                     | <instr_if>
                     | <expressão> ";"

<instr_break>      ::= "break" ";"

<instr_atribuição> ::= <identificador> "=" <expressão> ";"

<instr_if>         ::= "if" "(" <expressão> ")" "{" <bloco> "}"
                       [ "else" ( <instr_if> | "{" <bloco> "}" ) ]

<instr_while>      ::= "while" "(" <expressão> ")" "{" <bloco> "}"

<bloco>            ::= { <declaração> [ ";" ] }

<expressão>        ::= <and_expr> { "or" <and_expr> }

<and_expr>         ::= <comp_expr> { "and" <comp_expr> }

<comp_expr>        ::= <arit_expr> { <op_comp> <arit_expr> }

<op_comp>          ::= "==" | "!=" | "<" | ">" | "<=" | ">="

<arit_expr>        ::= <termo> { ("+" | "-") <termo> }

<termo>            ::= <fator> { ("*" | "/") <fator> }

<fator>            ::= ("not" | "-" | "+") <fator>
                     | <literal>
                     | <identificador>
                     | "(" <expressão> ")"
                     | "print" "(" <expressão> ")"

<literal>          ::= <integer> | <float> | <string> | <boolean>

<integer>          ::= [ "-" ] <dígito> { <dígito> }

<float>            ::= [ "-" ] <dígito> { <dígito> } "." <dígito> { <dígito> }

<string>           ::= '"' { <caractere> } '"'

<boolean>          ::= "true" | "false"

<identificador>    ::= ( <letra> | "_" ) { <letra> | <dígito> | "_" }

<dígito>           ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<letra>            ::= "a" .. "z" | "A" .. "Z"

<caractere>        ::= qualquer caractere Unicode exceto '"'

================================================================================
FIM DA GRAMÁTICA
================================================================================
